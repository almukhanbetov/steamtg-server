package handlers

import (
	"bytes"
	"context"
	"io"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jackc/pgx/v5/pgxpool"
)

func CreateClientAndOrderHandler(db *pgxpool.Pool) gin.HandlerFunc {
	return func(c *gin.Context) {
		// üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º "—Å—ã—Ä–æ–π" JSON –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
		body, _ := io.ReadAll(c.Request.Body)
		log.Println("üì¶ –°—ã—Ä–æ–π JSON –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", string(body))
		c.Request.Body = io.NopCloser(bytes.NewBuffer(body)) // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —á—Ç–µ–Ω–∏—è

		// üë§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
		var req struct {
			Name        string  `json:"name"`
			Phone       string  `json:"phone"`
			Plate       string  `json:"plate"`
			CategoryID  int     `json:"category_id"`
			Lon         float64 `json:"lon"`
			Lat         float64 `json:"lat"`
			AddressAuto string  `json:"address_auto"`
			LonAuto     float64 `json:"lon_auto"`
			LatAuto     float64 `json:"lat_auto"`
		}

		// üì• –ü–∞—Ä—Å–∏–º JSON
		if err := c.ShouldBindJSON(&req); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err)
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"})
			return
		}

		log.Println("üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:")
		log.Println("–ò–º—è:", req.Name)
		log.Println("–¢–µ–ª–µ—Ñ–æ–Ω:", req.Phone)
		log.Println("–ê–¥—Ä–µ—Å (–∞–≤—Ç–æ):", req.AddressAuto)
		log.Println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∞–≤—Ç–æ):", req.LonAuto, req.LatAuto)

		// ‚úÖ 1. –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
		var driverID int
		queryDriver := `
			SELECT id
			FROM drivers
			ORDER BY location <-> ST_SetSRID(ST_MakePoint($1, $2), 4326)
			LIMIT 1
		`
		err := db.QueryRow(context.Background(), queryDriver, req.Lon, req.Lat).Scan(&driverID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è:", err)
			log.Println("üß≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", req.Lon, req.Lat)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è"})
			return
		}
		log.Println("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å —Å ID:", driverID)

		// ‚úÖ 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∞–∑–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		tx, err := db.Begin(context.Background())
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			return
		}
		defer tx.Rollback(context.Background())

		var clientID int

		log.Println("üì¶ –í—Å—Ç–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î...")
		err = tx.QueryRow(context.Background(),
			`INSERT INTO clients (
				name, phone, plate_number, category_id,
				location, address_auto, location_auto
			)
			VALUES (
				$1, $2, $3, $4,
				ST_SetSRID(ST_MakePoint($5, $6), 4326),
				$7,
				ST_SetSRID(ST_MakePoint($8, $9), 4326)
			)
			RETURNING id`,
			req.Name, req.Phone, req.Plate, req.CategoryID,
			req.Lon, req.Lat,
			req.AddressAuto,
			req.LonAuto, req.LatAuto,
		).Scan(&clientID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"})
			return
		}
		log.Println("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID:", clientID)

		// ‚úÖ 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
		_, err = tx.Exec(context.Background(),
			`INSERT INTO orders (client_id, driver_id, status, created_at)
			 VALUES ($1, $2, 'pending', NOW())`,
			clientID, driverID)

		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"})
			return
		}

		if err := tx.Commit(context.Background()); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
			return
		}

		log.Println("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏ –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
		c.JSON(http.StatusOK, gin.H{"message": "–ö–ª–∏–µ–Ω—Ç –∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω—ã", "driver_id": driverID})
	}
}
